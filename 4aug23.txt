You are tasked with designing a simple banking system. The system should have the following classes: BankAccount, SavingsAccount, and CurrentAccount. Both SavingsAccount and CurrentAccount should inherit from BankAccount. Implement the classes and create a program to test their functionalities.

BankAccount class:
Attributes:
accountNumber (int): Represents the account number.
balance (double): Represents the account balance.
Methods:
deposit(double amount): Adds the given amount to the account balance.
withdraw(double amount): Deducts the given amount from the account balance.
SavingsAccount class (subclass of BankAccount):
Attributes:
interestRate (double): Represents the annual interest rate.
Methods:
Override withdraw(double amount): Deducts the given amount along with a withdrawal fee of 1% of the amount.
calculateInterest(): Calculates and returns the interest earned based on the account balance and interest rate.
CurrentAccount class (subclass of BankAccount):
Attributes:
overdraftLimit (double): Represents the overdraft limit allowed for this account.
Methods:
Override withdraw(double amount): Allows withdrawing the given amount only if the new balance after withdrawal is within the overdraft limit.

Your program should create instances of SavingsAccount and CurrentAccount, demonstrate the functionality of depositing, withdrawing, and calculating interest (for savings account). Use polymorphism to handle objects of different account types within a single list.

Implement the classes and demonstrate the functionality of the banking system with a sample program that performs the following steps:

Create a savings account with an initial balance of $500 and an interest rate of 3.5%.
Deposit $300 into the savings account.
Withdraw $200 from the savings account.
Calculate and display the interest earned by the savings account.
Create a current account with an initial balance of $1000 and an overdraft limit of $500.
Deposit $200 into the current account.
Withdraw $1500 from the current account.
Display the final balances of both accounts after all transactions.






You are tasked with designing a simple vehicle rental system. The system should have the following classes: Vehicle, Car, and Bike. Both Car and Bike should inherit from Vehicle. Implement the classes and create a program to test their functionalities.

Vehicle class:
Attributes:
registrationNumber (String): Represents the registration number of the vehicle.
fuelType (String): Represents the type of fuel used by the vehicle (e.g., petrol, diesel, electric).
rentalRate (double): Represents the rental rate per day for the vehicle.
Methods:
displayInfo(): Displays the basic information of the vehicle (registration number, fuel type, and rental rate).
Car class (subclass of Vehicle):
Attributes:
numberOfDoors (int): Represents the number of doors in the car.
Methods:
Override displayInfo(): Displays the basic information of the car along with the number of doors.
Bike class (subclass of Vehicle):
Attributes:
hasCarrier (boolean): Represents whether the bike has a carrier or not.
Methods:
Override displayInfo(): Displays the basic information of the bike along with the carrier status.

Your program should create instances of Car and Bike, demonstrate the functionality of displaying their information, and calculate the total rental cost for a given number of days for both vehicles.

Implement the classes and demonstrate the functionality of the vehicle rental system with a sample program that performs the following steps:

Create a car with registration number "CAR123", fuel type "petrol", rental rate $50 per day, and 4 doors.
Create a bike with registration number "BIKE456", fuel type "electric", rental rate $30 per day, and a carrier.
Display the information of both the car and the bike.
Ask the user to enter the number of days they want to rent the car and the bike.
Calculate and display the total rental cost for both vehicles separately and the combined total cost.































