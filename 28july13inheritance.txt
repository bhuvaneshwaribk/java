inheritance

why we need inheritance?
to reuse the code

what is inheritance?
using properties of one class into another class inheriting properties from one class into another class

how to implement inheritancein programming

using extends keyword

Synatx:

class A
{


}
class B extends class A
{



}

example:

class Jobseeker  //parent class,base class,super class
{
    String name;
    long Mobileno;
    String email;
    private int security code;// it is not inherted because it is private it is visible only in jobseeker
    void interviewschedule();

}

 

class  Fresher extends Jobseeker //fresher is a--->child class, derived class,sub class
{

String Qualification;
String ProjectDetails;
void  conductInterview();

}



class Experienced extends Jobseeker
{

int experience;
String pastcompanies;
doule expected salary;
void conductInterview();

}


fresher and experienced have their own properties along with their parents properties



types of inheritance:











-------------------------------------------------------------------------------------




import java.util.*;

 

class Jobseeker {
  String name;
  long mobileno;
  String email;
  private int securitycode;

 

  Jobseeker() {
    Scanner s = new Scanner(System.in);
    System.out.println("eneter candidate name, Mobile no, email");
    name = s.next();
    mobileno = s.nextLong();
    email = s.next();
  }

 

  void applyForJob() {
    System.out.println("i want job");
  }

 

}

 

class Employeer extends Jobseeker {
  Employeer() {
    System.out.println("i am eployeer constructor");
  }

 

  void checkDeatils() {
    System.out.println("jobseeker name is" + name);
    System.out.println("jobseeker mobile no is" + mobileno);
    System.out.println("jobseeker eamil is" + email);

 

  }

 

  void interviewdate() {
    System.out.println(name + " your inetrview is at 30th July");
  }

 

}

 

class SingleInheritance {
  public static void main(String p[]) {
    Jobseeker j = new Jobseeker();
    j.applyForJob();
    Employeer e = new Employeer();
    e.checkDeatils();
    j.checkDetails();
    e.interviewdate();
    e.applyForJob();
  }
}




isA realtionship --> inherrtence relation----> class empolyee and jobseeker is a example




hasA-->using the obj of one class in another class---->class (employee and singleinheritance) and(jobseeker and singleinheritence) are example of hasA




can we assign parent class to child class refernce...?


can we assign child class to parent class refernce...?

class SingleInheritance {
  public static void main(String p[]) {
    Jobseeker j1 = new Jobseeker();  // j1 is parent class  object
    Jobseeker j2; // j2 is parent class refernce
    j.applyForJob();
    Employeer e1 = new Employeer();  // e1 is child class obejct
    Employeer e2;  // e2 is child refernce
    e1.checkDeatils();
    j1.checkDetails();
    e1.interviewdate();
    e1.applyForJob();

            //Can we assign child class object to parent class reference?
    j2=e1;  // it is valid
            // Can we assign parent class object to child class reference?
    e2=j1;  // it is invlid it is type mismatch error
  }
}







java will not support muiltple inheritance using class because if we have same method in both parents then jvm will get confuse



class Hero
{
    int collection=100cs;
    void renumeration()
    {
        System.out.println("my renumeration is 1 core");
    }
}

 

class Herion
{
    int collection=200cs;
    void renumeration()
    {
        System.out.println("my renumeration is 2 core");
    }
}

 

class Movie extends Heo,Herion
{

 

    void display()
    {
        System.out.println("Movie name is Ranju and Rani prem khani");
    }
}

 

class Moviemain()
{
    public static void main(String h[])
    {
        Movie m=new Movie();
        m.display();
        m.renumeration();
        System.out.println(m.collection);
    }
}

